generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  displayName  String    @db.String
  tag          String    @default("SORA01") @db.String
  email        String    @unique @db.String
  passwordHash String    @db.String
  avatarUrl    String?   @db.String
  gender       String    @default("prefer_not_to_say") @db.String
  createdAt    DateTime  @default(now()) @db.Timestamp()
  updatedAt    DateTime  @default(now()) @db.Timestamp()
  lastActive   DateTime  @default(now()) @db.Timestamp()
  status       String    @default("offline") @db.String
  deletedAt    DateTime? @db.Timestamp()
}

model Chat {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  type           String    @default("dm") @db.String
  name           String    @db.String
  avatarUrl      String?   @db.String
  backgroundUrl  String?   @db.String
  invitationType String    @default("open") @db.String
  description    String?   @db.String
  createdAt      DateTime  @default(now()) @db.Timestamp()
  updatedAt      DateTime  @default(now()) @db.Timestamp()
  deletedAt      DateTime? @db.Timestamp()
}

model ChatUser {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  chatId      String    @db.ObjectId
  userId      String    @db.ObjectId
  role        String    @default("member") @db.String
  isBanned    Boolean   @default(false)
  bannedUntil DateTime?
  joinedAt    DateTime  @default(now()) @db.Timestamp()
  updatedAt   DateTime  @default(now()) @db.Timestamp()
}

model Message {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  chatId        String    @db.ObjectId
  senderId      String    @db.ObjectId
  content       String?   @db.String
  contentType   String    @default("text") @db.String
  sentAt        DateTime  @default(now()) @db.Timestamp()
  replyTo       String?   @db.ObjectId
  isForward     Boolean   @default(false)
  forwardedFrom String?   @db.ObjectId
  deletedAt     DateTime? @db.Timestamp()
}

model PinnedMessage {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  chatId      String    @db.ObjectId
  messageId   String    @db.ObjectId
  pinnedAt    DateTime  @default(now()) @db.Timestamp()
  pinnedUntil DateTime?
}

model Attachment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId       String   @db.ObjectId
  senderId     String   @db.ObjectId
  messageId    String   @db.ObjectId
  status       String   @default("pending") @db.String
  fileName     String   @db.String
  fileSize     String   @db.String // String for larger file sizes
  fileType     String?  @db.String
  fileUrl      String   @db.String
  thumbnailUrl String?  @db.String
  createdAt    DateTime @default(now()) @db.Timestamp()
  updatedAt    DateTime @default(now()) @db.Timestamp()
}

model MessageStatus {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  messageId   String    @db.ObjectId
  userId      String    @db.ObjectId
  status      String    @default("sent") @db.String
  deliveredAt DateTime?
  readAt      DateTime?
  updatedAt   DateTime  @default(now()) @db.Timestamp()
}

model Reaction {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  messageId    String @db.ObjectId
  userId       String @db.ObjectId
  reactionType String @db.String
}

model BannedWord {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String?  @db.ObjectId // Nullable for global bans
  regex     String   @unique @db.String
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()
  createdBy String   @db.ObjectId
  isEnabled Boolean  @default(true)
}

model ChannelSubscription {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId       String   @db.ObjectId
  userId       String   @db.ObjectId
  subscribedAt DateTime @default(now()) @db.Timestamp()
  updatedAt    DateTime @default(now()) @db.Timestamp()
}

model TypingStatus {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  chatId   String  @db.ObjectId
  userId   String  @db.ObjectId
  isTyping Boolean @default(false)
}

model UserSetting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  key       String   @db.String
  value     String?  @db.String
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()
}

model UserNotification {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  chatId     String    @db.ObjectId
  type       String    @db.String
  mutedUntil DateTime?
}

model SystemLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp DateTime @default(now()) @db.Timestamp()
  level     String   @default("info") @db.String
  eventType String?  @db.String
  message   String   @db.String
  context   Json?
  userId    String?  @db.ObjectId
}

model AuditLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  timestamp  DateTime @default(now()) @db.Timestamp()
  userId     String   @db.ObjectId
  level      String   @default("info") @db.String
  message    String   @db.String
  context    Json?
  action     String   @db.String
  targetId   String   @db.ObjectId
  targetType String   @db.String
}
